//
//  ViewController.swift
//  Tracker
//
//  Created by Artem Adiev on 15.06.2023.
//

import UIKit

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏
class SectionHeader: UICollectionReusableView {
    var titleLabel: UILabel!
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        
        titleLabel = UILabel()
        titleLabel.font = UIFont.systemFont(ofSize: 19, weight: .bold)
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        addSubview(titleLabel)
        
        NSLayoutConstraint.activate([
            titleLabel.leadingAnchor.constraint(equalTo: self.leadingAnchor, constant: 28),
            titleLabel.centerYAnchor.constraint(equalTo: self.centerYAnchor)
        ])
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
}

class TrackersViewController: UIViewController {
    
    // –ú–∞—Å—Å–∏–≤ —Å–æ –≤—Å–µ–º–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–µ–∫–µ—Ä–∞–º–∏
    private var categories: [TrackerCategory] = []
    
    // –ú–∞—Å—Å–∏–≤ —Å –≤–∏–¥–∏–º—ã–º–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Ç—Ä–µ–∫–µ—Ä–∞–º–∏
    private var visibleCategories: [[Tracker]] = [
        // –°–µ–∫—Ü–∏—è 1
        [Tracker(emoji: "‚ù§Ô∏è", text: "–ü–æ–ª–∏–≤–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è", backgroundColor: .colorSelection5, buttonColor: .colorSelection5, dayCount: "1 –¥–µ–Ω—å")],
        
        // –°–µ–∫—Ü–∏—è 2
        [Tracker(emoji: "üòª", text: "–ö–æ—à–∫–∞ –∑–∞—Å–ª–æ–Ω–∏–ª–∞ –∫–∞–º–µ—Ä—É –Ω–∞ —Å–æ–∑–≤–æ–Ω–µ", backgroundColor: .colorSelection2, buttonColor: .colorSelection2, dayCount: "5 –¥–Ω–µ–π"),
         Tracker(emoji: "üå∫", text: "–ë–∞–±—É—à–∫–∞ –ø—Ä–∏—Å–ª–∞–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∫—É –≤ –≤–æ—Ç—Å–∞–ø–ø–µ", backgroundColor: .colorSelection1, buttonColor: .colorSelection1, dayCount: "4 –¥–Ω—è"),
         Tracker(emoji: "‚ù§Ô∏è", text: "–°–≤–∏–¥–∞–Ω–∏—è –≤ –∞–ø—Ä–µ–ª–µ", backgroundColor: .colorSelection14, buttonColor: .colorSelection14, dayCount: "5 –¥–Ω–µ–π")]
    ]
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–µ–∫—Ü–∏–π (—Ö–µ–¥–µ—Ä—ã)
    private var sectionTitles = ["–î–æ–º–∞—à–Ω–∏–π —É—é—Ç", "–†–∞–¥–æ—Å—Ç–Ω—ã–µ –º–µ–ª–æ—á–∏"]
    
    // MARK: - UI ELEMENTS
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    var trackerCollectionView: UICollectionView = {
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: UICollectionViewFlowLayout())
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–∏–ø —è—á–µ–µ–∫
        collectionView.register(TrackerCollectionViewCell.self, forCellWithReuseIdentifier: "cell")
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–∏–ø —Ö–µ–¥–µ—Ä–∞
        collectionView.register(SectionHeader.self,
                                forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader,
                                withReuseIdentifier: "header")

        return collectionView
    }()
    
    
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä DatePicker
    let datePicker: UIDatePicker = {
        let picker = UIDatePicker()
        picker.preferredDatePickerStyle = .compact
        picker.datePickerMode = .date
        picker.calendar.firstWeekday = 2
        return picker
    }()
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä UILabel
    private lazy var mainLabel: UILabel = {
        let mainLabel = UILabel()
        mainLabel.text = "–¢—Ä–µ–∫–µ—Ä—ã"
        mainLabel.textColor = .ypBlack
        mainLabel.font = UIFont.systemFont(ofSize: 34, weight: .bold)
        return mainLabel
    }()
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä UISearchTextField
    private lazy var searchField: UISearchTextField = {
        let field = UISearchTextField()
        field.placeholder = "–ü–æ–∏—Å–∫"
        return field
    }()
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É-–∑–∞–≥–ª—É—à–∫—É –¥–ª—è –ø—É—Å—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    private lazy var emptyCollectionIcon: UIImageView = {
        let image = UIImage(named: "EmptyCollectionIcon")
        let emptyCollectionIcon = UIImageView(image: image)
        return emptyCollectionIcon
    }()
    
    // –ü–æ–¥–ø–∏—Å—å –ø–æ–¥ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π-–∑–∞–≥–ª—É—à–∫–æ–π
    private lazy var emptyCollectionLabel: UILabel = {
        let label = UILabel()
        label.text = "–ß—Ç–æ –±—É–¥–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å?"
        label.textColor = .ypBlack
        label.font = UIFont.systemFont(ofSize: 12)
        return label
    }()
    
    // MARK: - LIFECYCLE
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –¥–ª—è —ç–∫—Ä–∞–Ω–∞
        view.backgroundColor = .ypWhite
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏ –¥—Ä—É–≥–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã
        setupTrackerCollectionView()
        addSubviews()
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ NavigationBar
        if let navBar = navigationController?.navigationBar {
            let addButton = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(addButtonTaped))
            addButton.tintColor = .ypBlack
            navBar.topItem?.setLeftBarButton(addButton, animated: false)
            
            let datePickerButton = UIBarButtonItem(customView: datePicker)
            navBar.topItem?.setRightBarButton(datePickerButton, animated: false)
        }
    }
    
    @objc func addButtonTaped() {
        let modalVC = AddTrackerViewController()
        modalVC.modalTransitionStyle = .coverVertical
        present(modalVC, animated: true)
    }
    
    
    // MARK: - UI ELEMENTS LAYOUT
    
     private func addSubviews() {
        mainLabel.translatesAutoresizingMaskIntoConstraints = false
        searchField.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(mainLabel)
        view.addSubview(searchField)
        
        NSLayoutConstraint.activate([
            mainLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            mainLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            searchField.topAnchor.constraint(equalTo: mainLabel.bottomAnchor, constant: 7),
            searchField.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            searchField.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
        ])
        
        if visibleCategories.count == 0 {
            emptyCollectionIcon.translatesAutoresizingMaskIntoConstraints = false
            emptyCollectionLabel.translatesAutoresizingMaskIntoConstraints = false
            view.addSubview(emptyCollectionIcon)
            view.addSubview(emptyCollectionLabel)
            
            NSLayoutConstraint.activate([
                emptyCollectionIcon.centerXAnchor.constraint(equalTo: view.centerXAnchor),
                emptyCollectionIcon.centerYAnchor.constraint(equalTo: view.centerYAnchor),
                emptyCollectionLabel.topAnchor.constraint(equalTo: emptyCollectionIcon.bottomAnchor, constant: 8),
                emptyCollectionLabel.centerXAnchor.constraint(equalTo: emptyCollectionIcon.centerXAnchor)
            ])
        } else {
            trackerCollectionView.translatesAutoresizingMaskIntoConstraints = false
            view.addSubview(trackerCollectionView)
            NSLayoutConstraint.activate([
                trackerCollectionView.topAnchor.constraint(equalTo: searchField.bottomAnchor, constant: 10),
                trackerCollectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
                trackerCollectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
                trackerCollectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor)
            ])
        }
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private func setupTrackerCollectionView() {
        trackerCollectionView.dataSource = self
        trackerCollectionView.delegate = self
    }
}

// MARK: - EXTENSIONS

extension TrackersViewController: UICollectionViewDataSource {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return visibleCategories.count
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        visibleCategories[section].count
    }
    
    // –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "cell", for: indexPath) as! TrackerCollectionViewCell
        
        // –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —è—á–µ–π–∫—É –∏–∑ –º–∞—Å—Å–∏–≤–∞
        let tracker = visibleCategories[indexPath.section][indexPath.item]
        cell.emojiLabel.text = tracker.emoji
        cell.trackerText.text = tracker.text
        cell.upperView.backgroundColor = tracker.backgroundColor
        cell.actionButton.tintColor = tracker.buttonColor
        cell.dayCountLabel.text = tracker.dayCount
        
        return cell
    }
}

extension TrackersViewController: UICollectionViewDelegate {
    
}

extension TrackersViewController: UICollectionViewDelegateFlowLayout {
    
    // –ó–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (—è—á–µ–π–∫–∏) –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    func collectionView(
        _ collectionView: UICollectionView,
        layout collectionViewLayout: UICollectionViewLayout,
        sizeForItemAt indexPath: IndexPath
    ) -> CGSize {
        return CGSize(width: (collectionView.bounds.width / 2) - 20.0, height: 148)

    }
    
    // –ó–∞–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    func collectionView(
        _ collectionView: UICollectionView,
        layout collectionViewLayout: UICollectionViewLayout,
        minimumInteritemSpacingForSectionAt section: Int
    ) -> CGFloat {
        return 10
    }
    
    // –ó–∞–¥–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –≤—Å–µ–π —Å–µ–∫—Ü–∏–∏
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        UIEdgeInsets(top: 0.0, left: 15.0, bottom: 0.0, right: 15.0)
    }
    
    // –í—ã—Å–æ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        return CGSize(width: collectionView.frame.width, height: 50) // –í—ã—Å–æ—Ç–∞ —Ö–µ–¥–µ—Ä–∞
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        switch kind {
        case UICollectionView.elementKindSectionHeader:
            let headerView = collectionView.dequeueReusableSupplementaryView(ofKind: kind,
                                                                         withReuseIdentifier: "header",
                                                                         for: indexPath) as! SectionHeader
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
            headerView.titleLabel.text = sectionTitles[indexPath.section]
            return headerView
        default:
            assert(false, "Invalid element type for SupplementaryElement")
        }
    }
}



